{"version":3,"sources":["../../src/runtime/wpt.ts"],"names":["TestLoader","Logger","makeQueryString","loader","files","loadTestsFromQuery","window","location","search","log","running","f","spec","rec","record","id","t","g","iterate","run","push","async_test","r","step","status","logs","join","done","Promise","all","resultsElem","document","getElementById","textContent","asJSON"],"mappings":";;;;AAAA,SAASA,UAAT,QAA2B,wBAA3B;AACA,SAASC,MAAT,QAAuB,wBAAvB;AACA,SAASC,eAAT,QAAgC,2BAAhC;;AAUA,CAAC,YAAY;AACX,QAAMC,MAAM,GAAG,IAAIH,UAAJ,EAAf;AACA,QAAMI,KAAK,GAAG,MAAMD,MAAM,CAACE,kBAAP,CAA0BC,MAAM,CAACC,QAAP,CAAgBC,MAA1C,CAApB;AAEA,QAAMC,GAAG,GAAG,IAAIR,MAAJ,EAAZ;AACA,QAAMS,OAAO,GAAG,EAAhB;;AAEA,OAAK,MAAMC,CAAX,IAAgBP,KAAhB,EAAuB;AACrB,QAAI,EAAE,OAAOO,CAAC,CAACC,IAAX,CAAJ,EAAsB;AACpB;AACD;;AAED,UAAM,CAACC,GAAD,IAAQJ,GAAG,CAACK,MAAJ,CAAWH,CAAC,CAACI,EAAb,CAAd,CALqB,CAMrB;;AACA,SAAK,MAAMC,CAAX,IAAgBL,CAAC,CAACC,IAAF,CAAOK,CAAP,CAASC,OAAT,CAAiBL,GAAjB,CAAhB,EAAuC;AACrC,YAAMM,GAAG,GAAGH,CAAC,CAACG,GAAF,EAAZ;AACAT,MAAAA,OAAO,CAACU,IAAR,CAAaD,GAAb,EAFqC,CAGrC;;AACAE,MAAAA,UAAU,CAAC,kBAAmD;AAC5D,cAAMC,CAAC,GAAG,MAAMH,GAAhB;AACA,aAAKI,IAAL,CAAU,MAAM;AACd,cAAID,CAAC,CAACE,MAAF,KAAa,MAAjB,EAAyB;AACvB,kBAAM,CAACF,CAAC,CAACG,IAAF,IAAU,EAAX,EAAeC,IAAf,CAAoB,IAApB,CAAN;AACD;AACF,SAJD;AAKA,aAAKC,IAAL;AACD,OARS,EAQPzB,eAAe,CAACS,CAAC,CAACI,EAAH,EAAOC,CAAC,CAACD,EAAT,CARR,CAAV;AASD;AACF;;AAED,QAAMa,OAAO,CAACC,GAAR,CAAYnB,OAAZ,CAAN;AACA,QAAMoB,WAAW,GAAGC,QAAQ,CAACC,cAAT,CAAwB,SAAxB,CAApB;AACAF,EAAAA,WAAW,CAACG,WAAZ,GAA0BxB,GAAG,CAACyB,MAAJ,CAAW,CAAX,CAA1B;AACD,CAjCD","sourcesContent":["import { TestLoader } from '../framework/loader.js';\nimport { Logger } from '../framework/logger.js';\nimport { makeQueryString } from '../framework/url_query.js';\n\ndeclare interface WptTestObject {\n  step(f: () => void): void;\n  done(): void;\n}\n// Implements the wpt-embedded test runner (see also: wpt/cts.html).\n\ndeclare function async_test(f: (this: WptTestObject) => Promise<void>, name: string): void;\n\n(async () => {\n  const loader = new TestLoader();\n  const files = await loader.loadTestsFromQuery(window.location.search);\n\n  const log = new Logger();\n  const running = [];\n\n  for (const f of files) {\n    if (!('g' in f.spec)) {\n      continue;\n    }\n\n    const [rec] = log.record(f.id);\n    // TODO: don't run all tests all at once\n    for (const t of f.spec.g.iterate(rec)) {\n      const run = t.run();\n      running.push(run);\n      // Note: apparently, async_tests must ALL be added within the same task.\n      async_test(async function(this: WptTestObject): Promise<void> {\n        const r = await run;\n        this.step(() => {\n          if (r.status === 'fail') {\n            throw (r.logs || []).join('\\n');\n          }\n        });\n        this.done();\n      }, makeQueryString(f.id, t.id));\n    }\n  }\n\n  await Promise.all(running);\n  const resultsElem = document.getElementById('results') as HTMLElement;\n  resultsElem.textContent = log.asJSON(2);\n})();\n"],"file":"wpt.js"}