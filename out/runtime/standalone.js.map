{"version":3,"sources":["../../src/runtime/standalone.ts"],"names":["TestLoader","Logger","makeQueryString","log","runButtonCallbacks","Map","resultsJSON","document","getElementById","resultsVis","makeTest","spec","description","test","$","addClass","appendTo","testrun","html","text","testcases","on","el","find","rc","get","textContent","asJSON","mkCase","testcasesVis","query","t","debug","testcase","casehead","caserun","casetime","caselogs","class","runCase","res","run","timems","toFixed","removeClass","status","logs","empty","l","set","url","URL","window","location","toString","runnow","searchParams","loader","files","loadTestsFromQuery","search","runCaseList","f","id","tRec","record","g","iterate","push"],"mappings":"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","sourcesContent":["// Implements the standalone test runner (see also: index.html).\n\nimport { TestSpecID } from '../framework/id.js';\nimport { RunCase } from '../framework/index.js';\nimport { TestLoader } from '../framework/loader.js';\nimport { Logger } from '../framework/logger.js';\nimport { makeQueryString } from '../framework/url_query.js';\n\nconst log = new Logger();\n\ntype runButtonCallback = () => Promise<void>;\nconst runButtonCallbacks = new Map<HTMLElement, runButtonCallback>();\n\nconst resultsJSON = document.getElementById('resultsJSON') as HTMLElement;\nconst resultsVis = document.getElementById('resultsVis') as HTMLElement;\nfunction makeTest(spec: TestSpecID, description: string): HTMLElement {\n  const test = $('<div>')\n    .addClass('test')\n    .appendTo(resultsVis);\n\n  const testrun = $('<button>')\n    .addClass('testrun')\n    .html('&#9654;')\n    .appendTo(test);\n\n  $('<div>')\n    .addClass('testname')\n    .text(makeQueryString(spec))\n    .appendTo(test);\n\n  $('<div>')\n    .addClass('testdesc')\n    .text(description)\n    .appendTo(test);\n\n  const testcases = $('<div>')\n    .addClass('testcases')\n    .appendTo(test);\n\n  testrun.on('click', async () => {\n    for (const el of test.find('.caserun')) {\n      const rc = runButtonCallbacks.get(el) as runButtonCallback;\n      await rc();\n    }\n    resultsJSON.textContent = log.asJSON(2);\n  });\n\n  return testcases[0];\n}\n\nfunction mkCase(\n  testcasesVis: HTMLElement,\n  query: string,\n  t: RunCase,\n  debug: boolean\n): () => Promise<void> {\n  const testcase = $('<div>')\n    .addClass('testcase')\n    .appendTo(testcasesVis);\n  const casehead = $('<div>')\n    .addClass('casehead')\n    .appendTo(testcase);\n\n  const caserun = $('<button>')\n    .addClass('caserun')\n    .html('&#9654;')\n    .appendTo(casehead);\n  $('<div>')\n    .addClass('casename')\n    .appendTo(casehead)\n    .text(query);\n  const casetime = $('<div>')\n    .addClass('casetime')\n    .appendTo(casehead);\n\n  const caselogs = $('<div>', { class: 'caselogs' }).appendTo(testcase);\n\n  const runCase = async () => {\n    const res = await t.run(debug);\n\n    casetime.text(res.timems.toFixed(4) + ' ms');\n\n    testcase.removeClass('pass');\n    testcase.removeClass('warn');\n    testcase.removeClass('fail');\n    testcase.addClass(res.status);\n\n    if (res.logs) {\n      caselogs.empty();\n      for (const l of res.logs) {\n        $('<div>', { class: 'caselog' })\n          .appendTo(caselogs)\n          .text(l);\n      }\n    }\n  };\n  runButtonCallbacks.set(caserun[0], runCase);\n  caserun.on('click', async () => {\n    await runCase();\n    resultsJSON.textContent = log.asJSON(2);\n  });\n  return runCase;\n}\n\n(async () => {\n  const url = new URL(window.location.toString());\n  const runnow = url.searchParams.get('runnow') === '1';\n  const debug = url.searchParams.get('debug') === '1';\n\n  const loader = new TestLoader();\n\n  // TODO: everything after this point is very similar across the three runtimes.\n  // TODO: start populating page before waiting for everything to load?\n  const files = await loader.loadTestsFromQuery(window.location.search);\n  // TODO: convert listing to tree so it can be displayed as a tree?\n\n  const runCaseList = [];\n  for (const f of files) {\n    const testcasesVis = makeTest(f.id, f.spec.description);\n\n    if (!('g' in f.spec)) {\n      continue;\n    }\n\n    const [tRec] = log.record(f.id);\n    for (const t of f.spec.g.iterate(tRec)) {\n      const query = makeQueryString(f.id, t.id);\n      const runCase = mkCase(testcasesVis, query, t, debug);\n      runCaseList.push(runCase);\n    }\n  }\n\n  if (runnow) {\n    for (const runCase of runCaseList) {\n      await runCase();\n    }\n    resultsJSON.textContent = log.asJSON(2);\n  }\n})();\n"],"file":"standalone.js"}