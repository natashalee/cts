{"version":3,"sources":["../../src/framework/loader.ts"],"names":["loadFilter","concat","lists","specs","DefaultTestFileLoader","listing","suite","import","path","TestLoader","constructor","fileLoader","loadTestsFromQuery","query","loadTests","URLSearchParams","getAll","loadTestsFromCmdLine","filters","map","f","decodeURIComponent","replace","loads","Promise","all"],"mappings":";;;;;;AACA,SAA2BA,UAA3B,QAA6C,wBAA7C;;AAmBA,UAAUC,MAAV,CAAiBC,KAAjB,EAAwE;AACtE,OAAK,MAAMC,KAAX,IAAoBD,KAApB,EAA2B;AACzB,WAAOC,KAAP;AACD;AACF;;AAOD,MAAMC,qBAAN,CAAsD;AACpD,QAAMC,OAAN,CAAcC,KAAd,EAAwD;AACtD,WAAO,CAAC,MAAM,OAAQ,aAAYA,KAAM,WAA1B,CAAP,EAA8CD,OAArD;AACD;;AAEDE,EAAAA,MAAM,CAACC,IAAD,EAAkC;AACtC,WAAO,OAAO,eAAeA,IAAtB,CAAP;AACD;;AAPmD;;AAUtD,OAAO,MAAMC,UAAN,CAAiB;AAGtBC,EAAAA,WAAW,CAACC,UAA0B,GAAG,IAAIP,qBAAJ,EAA9B,EAA2D;AAAA;;AACpE,SAAKO,UAAL,GAAkBA,UAAlB;AACD,GALqB,CAOtB;;;AACA,QAAMC,kBAAN,CAAyBC,KAAzB,EAA2E;AACzE,WAAO,KAAKC,SAAL,CAAe,IAAIC,eAAJ,CAAoBF,KAApB,EAA2BG,MAA3B,CAAkC,GAAlC,CAAf,CAAP;AACD,GAVqB,CAYtB;AACA;;;AACA,QAAMC,oBAAN,CAA2BC,OAA3B,EAAiF;AAC/E;AACA;AACA,WAAO,KAAKJ,SAAL,CAAeI,OAAO,CAACC,GAAR,CAAYC,CAAC,IAAIC,kBAAkB,CAACD,CAAC,CAACE,OAAF,CAAU,KAAV,EAAiB,KAAjB,CAAD,CAAnC,CAAf,CAAP;AACD;;AAED,QAAcR,SAAd,CAAwBI,OAAxB,EAA8E;AAC5E,UAAMK,KAAK,GAAGL,OAAO,CAACC,GAAR,CAAYC,CAAC,IAAIpB,UAAU,CAAC,KAAKW,UAAN,EAAkBS,CAAlB,CAA3B,CAAd;AACA,WAAOnB,MAAM,EAAC,MAAMuB,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAAP,EAAb;AACD;;AAvBqB","sourcesContent":["import { TestSuiteListing } from './listing.js';\nimport { TestFilterResult, loadFilter } from './test_filter/index.js';\nimport { RunCaseIterable } from './test_group.js';\n\n// One of the following:\n// - An actual .spec.ts file, as imported.\n// - A *filtered* list of cases from a single .spec.ts file.\nexport interface TestSpec {\n  readonly description: string;\n  readonly g: RunCaseIterable;\n}\n\n// A shell object describing a directory (from its README.txt).\nexport interface ReadmeFile {\n  readonly description: string;\n}\n\nexport type TestSpecOrReadme = TestSpec | ReadmeFile;\n\ntype TestFilterResultIterator = IterableIterator<TestFilterResult>;\nfunction* concat(lists: TestFilterResult[][]): TestFilterResultIterator {\n  for (const specs of lists) {\n    yield* specs;\n  }\n}\n\nexport interface TestFileLoader {\n  listing(suite: string): Promise<TestSuiteListing>;\n  import(path: string): Promise<TestSpecOrReadme>;\n}\n\nclass DefaultTestFileLoader implements TestFileLoader {\n  async listing(suite: string): Promise<TestSuiteListing> {\n    return (await import(`../suites/${suite}/index.js`)).listing;\n  }\n\n  import(path: string): Promise<TestSpec> {\n    return import('../suites/' + path);\n  }\n}\n\nexport class TestLoader {\n  private fileLoader: TestFileLoader;\n\n  constructor(fileLoader: TestFileLoader = new DefaultTestFileLoader()) {\n    this.fileLoader = fileLoader;\n  }\n\n  // TODO: Test\n  async loadTestsFromQuery(query: string): Promise<TestFilterResultIterator> {\n    return this.loadTests(new URLSearchParams(query).getAll('q'));\n  }\n\n  // TODO: Test\n  // TODO: Probably should actually not exist at all, just use queries on cmd line too.\n  async loadTestsFromCmdLine(filters: string[]): Promise<TestFilterResultIterator> {\n    // In actual URL queries (?q=...), + represents a space. But decodeURIComponent doesn't do this,\n    // so do it manually. (+ is used over %20 for readability.) (See also encodeSelectively.)\n    return this.loadTests(filters.map(f => decodeURIComponent(f.replace(/\\+/g, '%20'))));\n  }\n\n  private async loadTests(filters: string[]): Promise<TestFilterResultIterator> {\n    const loads = filters.map(f => loadFilter(this.fileLoader, f));\n    return concat(await Promise.all(loads));\n  }\n}\n"],"file":"loader.js"}