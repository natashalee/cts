{"version":3,"sources":["../../src/framework/logger.ts"],"names":["makeQueryString","getStackTrace","now","version","Logger","constructor","record","spec","result","cases","results","push","TestSpecRecorder","asJSON","space","JSON","stringify","undefined","test","params","status","timems","TestCaseRecorder","start","debug","startTime","logs","failed","warned","debugging","finish","Error","endTime","Math","ceil","msg","log","warn","m","fail","threw","e","name","message"],"mappings":"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","sourcesContent":["import { TestSpecID } from './id.js';\nimport { ParamsSpec } from './params/index.js';\nimport { makeQueryString } from './url_query.js';\nimport { getStackTrace, now } from './util/index.js';\nimport { version } from './version.js';\n\ntype Status = 'running' | 'pass' | 'warn' | 'fail';\nexport interface LiveTestSpecResult {\n  readonly spec: string;\n  readonly cases: LiveTestCaseResult[];\n}\n\nexport interface LiveTestCaseResult {\n  readonly test: string;\n  readonly params: ParamsSpec | null;\n  status: Status;\n  logs?: string[];\n  timems: number;\n}\n\nexport class Logger {\n  readonly results: LiveTestSpecResult[] = [];\n\n  constructor() {}\n\n  record(spec: TestSpecID): [TestSpecRecorder, LiveTestSpecResult] {\n    const result: LiveTestSpecResult = { spec: makeQueryString(spec), cases: [] };\n    this.results.push(result);\n    return [new TestSpecRecorder(result), result];\n  }\n\n  asJSON(space?: number): string {\n    return JSON.stringify({ version, results: this.results }, undefined, space);\n  }\n}\n\nexport class TestSpecRecorder {\n  private result: LiveTestSpecResult;\n\n  constructor(result: LiveTestSpecResult) {\n    this.result = result;\n  }\n\n  record(test: string, params: ParamsSpec | null): [TestCaseRecorder, LiveTestCaseResult] {\n    const result: LiveTestCaseResult = { test, params, status: 'running', timems: -1 };\n    this.result.cases.push(result);\n    return [new TestCaseRecorder(result), result];\n  }\n}\n\nexport class TestCaseRecorder {\n  private result: LiveTestCaseResult;\n  private failed = false;\n  private warned = false;\n  private startTime = -1;\n  private logs: string[] = [];\n  private debugging = false;\n\n  constructor(result: LiveTestCaseResult) {\n    this.result = result;\n  }\n\n  start(debug: boolean = false): void {\n    this.startTime = now();\n    this.logs = [];\n    this.failed = false;\n    this.warned = false;\n    this.debugging = debug;\n  }\n\n  finish(): void {\n    if (this.startTime < 0) {\n      throw new Error('finish() before start()');\n    }\n    const endTime = now();\n    // Round to next microsecond to avoid storing useless .xxxx00000000000002 in results.\n    this.result.timems = Math.ceil((endTime - this.startTime) * 1000) / 1000;\n    this.result.status = this.failed ? 'fail' : this.warned ? 'warn' : 'pass';\n\n    this.result.logs = this.logs;\n    this.debugging = false;\n  }\n\n  debug(msg: string): void {\n    if (!this.debugging) {\n      return;\n    }\n    this.log('DEBUG: ' + msg);\n  }\n\n  log(msg: string): void {\n    this.logs.push(msg);\n  }\n\n  warn(msg?: string): void {\n    this.warned = true;\n    let m = 'WARN';\n    if (msg) {\n      m += ': ' + msg;\n    }\n    m += ' ' + getStackTrace(new Error());\n    this.log(m);\n  }\n\n  fail(msg?: string): void {\n    this.failed = true;\n    let m = 'FAIL';\n    if (msg) {\n      m += ': ' + msg;\n    }\n    m += ' ' + getStackTrace(new Error());\n    this.log(m);\n  }\n\n  threw(e: Error): void {\n    this.failed = true;\n    this.log('EXCEPTION: ' + e.name + ': ' + e.message + '\\n' + getStackTrace(e));\n  }\n}\n"],"file":"logger.js"}