{"version":3,"sources":["../../src/framework/url_query.ts"],"names":["encodeSelectively","s","ret","encodeURIComponent","replace","makeQueryString","spec","testcase","suite","path","undefined","test","params","JSON","stringify"],"mappings":";;;;AAEA,OAAO,SAASA,iBAAT,CAA2BC,CAA3B,EAA8C;AACnD,MAAIC,GAAG,GAAGC,kBAAkB,CAACF,CAAD,CAA5B;AACAC,EAAAA,GAAG,GAAGA,GAAG,CAACE,OAAJ,CAAY,MAAZ,EAAoB,GAApB,CAAN,CAFmD,CAEnB;;AAChCF,EAAAA,GAAG,GAAGA,GAAG,CAACE,OAAJ,CAAY,MAAZ,EAAoB,GAApB,CAAN;AACAF,EAAAA,GAAG,GAAGA,GAAG,CAACE,OAAJ,CAAY,MAAZ,EAAoB,GAApB,CAAN;AACAF,EAAAA,GAAG,GAAGA,GAAG,CAACE,OAAJ,CAAY,MAAZ,EAAoB,GAApB,CAAN;AACAF,EAAAA,GAAG,GAAGA,GAAG,CAACE,OAAJ,CAAY,MAAZ,EAAoB,GAApB,CAAN;AACAF,EAAAA,GAAG,GAAGA,GAAG,CAACE,OAAJ,CAAY,MAAZ,EAAoB,GAApB,CAAN;AACAF,EAAAA,GAAG,GAAGA,GAAG,CAACE,OAAJ,CAAY,MAAZ,EAAoB,GAApB,CAAN;AACAF,EAAAA,GAAG,GAAGA,GAAG,CAACE,OAAJ,CAAY,MAAZ,EAAoB,GAApB,CAAN;AACAF,EAAAA,GAAG,GAAGA,GAAG,CAACE,OAAJ,CAAY,MAAZ,EAAoB,GAApB,CAAN;AACAF,EAAAA,GAAG,GAAGA,GAAG,CAACE,OAAJ,CAAY,MAAZ,EAAoB,GAApB,CAAN;AACA,SAAOF,GAAP;AACD;AAED,OAAO,SAASG,eAAT,CAAyBC,IAAzB,EAA2CC,QAA3C,EAA0E;AAC/E,MAAIN,CAAC,GAAGK,IAAI,CAACE,KAAL,GAAa,GAArB;AACAP,EAAAA,CAAC,IAAIK,IAAI,CAACG,IAAL,GAAY,GAAjB;;AACA,MAAIF,QAAQ,KAAKG,SAAjB,EAA4B;AAC1BT,IAAAA,CAAC,IAAIM,QAAQ,CAACI,IAAT,GAAgB,GAArB;;AACA,QAAIJ,QAAQ,CAACK,MAAb,EAAqB;AACnBX,MAAAA,CAAC,IAAIY,IAAI,CAACC,SAAL,CAAeP,QAAQ,CAACK,MAAxB,CAAL;AACD;AACF;;AACD,SAAOZ,iBAAiB,CAACC,CAAD,CAAxB;AACD","sourcesContent":["import { TestCaseID, TestSpecID } from './id.js';\n\nexport function encodeSelectively(s: string): string {\n  let ret = encodeURIComponent(s);\n  ret = ret.replace(/%20/g, '+'); // Encode space with + (equivalent but more readable)\n  ret = ret.replace(/%22/g, '\"');\n  ret = ret.replace(/%2C/g, ',');\n  ret = ret.replace(/%2F/g, '/');\n  ret = ret.replace(/%3A/g, ':');\n  ret = ret.replace(/%3D/g, '=');\n  ret = ret.replace(/%5B/g, '[');\n  ret = ret.replace(/%5D/g, ']');\n  ret = ret.replace(/%7B/g, '{');\n  ret = ret.replace(/%7D/g, '}');\n  return ret;\n}\n\nexport function makeQueryString(spec: TestSpecID, testcase?: TestCaseID): string {\n  let s = spec.suite + ':';\n  s += spec.path + ':';\n  if (testcase !== undefined) {\n    s += testcase.test + '=';\n    if (testcase.params) {\n      s += JSON.stringify(testcase.params);\n    }\n  }\n  return encodeSelectively(s);\n}\n"],"file":"url_query.js"}