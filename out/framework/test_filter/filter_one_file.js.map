{"version":3,"sources":["../../../src/framework/test_filter/filter_one_file.ts"],"names":["paramsEquals","paramsSupersets","FilterOneFile","constructor","specId","iterate","loader","spec","import","suite","path","id","description","g","getCases","filterTestGroup","group","filter","log","rc","FilterByTestMatch","testPrefix","testcase","test","startsWith","matches","Error","FilterByParamsMatch","params","FilterByParamsExact"],"mappings":"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","sourcesContent":["import { TestCaseID, TestSpecID } from '../id.js';\nimport { TestFileLoader, TestSpec } from '../loader.js';\nimport { TestSpecRecorder } from '../logger.js';\nimport { ParamsAny, paramsEquals, paramsSupersets } from '../params/index.js';\nimport { RunCase, RunCaseIterable } from '../test_group.js';\n\nimport { TestFilterResult } from './index.js';\nimport { TestFilter } from './internal.js';\n\nabstract class FilterOneFile implements TestFilter {\n  protected readonly specId: TestSpecID;\n\n  constructor(specId: TestSpecID) {\n    this.specId = specId;\n  }\n\n  abstract getCases(spec: TestSpec): RunCaseIterable;\n  abstract matches(spec: TestSpecID, testcase: TestCaseID): boolean;\n\n  async iterate(loader: TestFileLoader): Promise<TestFilterResult[]> {\n    const spec = (await loader.import(\n      `${this.specId.suite}/${this.specId.path}.spec.js`\n    )) as TestSpec;\n    return [\n      {\n        id: this.specId,\n        spec: {\n          description: spec.description,\n          g: this.getCases(spec),\n        },\n      },\n    ];\n  }\n}\n\ntype TestGroupFilter = (testcase: TestCaseID) => boolean;\nfunction filterTestGroup(group: RunCaseIterable, filter: TestGroupFilter): RunCaseIterable {\n  return {\n    *iterate(log: TestSpecRecorder): Iterable<RunCase> {\n      for (const rc of group.iterate(log)) {\n        if (filter(rc.id)) {\n          yield rc;\n        }\n      }\n    },\n  };\n}\n\nexport class FilterByTestMatch extends FilterOneFile {\n  private readonly testPrefix: string;\n\n  constructor(specId: TestSpecID, testPrefix: string) {\n    super(specId);\n    this.testPrefix = testPrefix;\n  }\n\n  getCases(spec: TestSpec): RunCaseIterable {\n    return filterTestGroup(spec.g, testcase => testcase.test.startsWith(this.testPrefix));\n  }\n\n  matches(spec: TestSpecID, testcase: TestCaseID): boolean {\n    throw new Error('unimplemented');\n  }\n}\n\nexport class FilterByParamsMatch extends FilterOneFile {\n  private readonly test: string;\n  private readonly params: ParamsAny | null;\n\n  constructor(specId: TestSpecID, test: string, params: ParamsAny | null) {\n    super(specId);\n    this.test = test;\n    this.params = params;\n  }\n\n  getCases(spec: TestSpec): RunCaseIterable {\n    return filterTestGroup(\n      spec.g,\n      testcase => testcase.test === this.test && paramsSupersets(testcase.params, this.params)\n    );\n  }\n\n  matches(spec: TestSpecID, testcase: TestCaseID): boolean {\n    throw new Error('unimplemented');\n  }\n}\n\nexport class FilterByParamsExact extends FilterOneFile {\n  private readonly test: string;\n  private readonly params: ParamsAny | null;\n\n  constructor(specId: TestSpecID, test: string, params: ParamsAny | null) {\n    super(specId);\n    this.test = test;\n    this.params = params;\n  }\n\n  getCases(spec: TestSpec): RunCaseIterable {\n    return filterTestGroup(\n      spec.g,\n      testcase => testcase.test === this.test && paramsEquals(testcase.params, this.params)\n    );\n  }\n\n  matches(spec: TestSpecID, testcase: TestCaseID): boolean {\n    throw new Error('unimplemented');\n  }\n}\n"],"file":"filter_one_file.js"}