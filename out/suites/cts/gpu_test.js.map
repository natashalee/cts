{"version":3,"sources":["../../../src/suites/cts/gpu_test.ts"],"names":["getGPU","Fixture","glslangInstance","GPUTest","undefined","init","gpu","adapter","requestAdapter","device","requestDevice","queue","getQueue","pushErrorScope","finalize","gpuValidationError","popErrorScope","GPUValidationError","Error","fail","message","gpuOutOfMemoryError","GPUOutOfMemoryError","initGLSL","glslangPath","glslangModule","default","Promise","resolve","then","glslang","makeShaderModule","stage","source","code","compileGLSL","createShaderModule","expectContents","src","expected","asyncExpectation","exp","Uint8Array","buffer","byteOffset","byteLength","size","dst","createBuffer","usage","GPUBufferUsage","MAP_READ","COPY_DST","c","createCommandEncoder","copyBufferToBuffer","submit","finish","actual","mapReadAsync","expectBuffer","rec","failedPixels","i","expHex","Array","from","map","x","toString","padStart","join","actHex","log"],"mappings":"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","sourcesContent":["import { getGPU } from '../../framework/gpu/implementation.js';\nimport { Fixture } from '../../framework/index.js';\n\ntype glslang = typeof import('@webgpu/glslang/dist/web-devel/glslang');\ntype Glslang = import('@webgpu/glslang/dist/web-devel/glslang').Glslang;\ntype ShaderStage = import('@webgpu/glslang/dist/web-devel/glslang').ShaderStage;\n\nlet glslangInstance: Glslang | undefined;\n\n// TODO: Should this gain some functionality currently only in UnitTest?\nexport class GPUTest extends Fixture {\n  device: GPUDevice = undefined!;\n  queue: GPUQueue = undefined!;\n\n  async init(): Promise<void> {\n    super.init();\n    const gpu = getGPU();\n    const adapter = await gpu.requestAdapter();\n    this.device = await adapter.requestDevice();\n    this.queue = this.device.getQueue();\n\n    this.device.pushErrorScope('out-of-memory');\n    this.device.pushErrorScope('validation');\n  }\n\n  async finalize(): Promise<void> {\n    super.finalize();\n\n    const gpuValidationError = await this.device.popErrorScope();\n    if (gpuValidationError !== null) {\n      if (!(gpuValidationError instanceof GPUValidationError)) throw new Error();\n      this.fail(`Unexpected validation error occurred: ${gpuValidationError.message}`);\n    }\n\n    const gpuOutOfMemoryError = await this.device.popErrorScope();\n    if (gpuOutOfMemoryError !== null) {\n      if (!(gpuOutOfMemoryError instanceof GPUOutOfMemoryError)) throw new Error();\n      this.fail('Unexpected out-of-memory error occurred');\n    }\n  }\n\n  async initGLSL(): Promise<void> {\n    if (!glslangInstance) {\n      const glslangPath = '../../glslang.js';\n      const glslangModule = ((await import(glslangPath)) as glslang).default;\n      await new Promise(resolve => {\n        glslangModule().then((glslang: Glslang) => {\n          glslangInstance = glslang;\n          resolve();\n        });\n      });\n    }\n  }\n\n  makeShaderModule(stage: ShaderStage, source: string): GPUShaderModule {\n    if (!glslangInstance) {\n      throw new Error('GLSL is not instantiated. Run `await t.initGLSL()` first');\n    }\n    const code = glslangInstance.compileGLSL(source, stage, false);\n    return this.device.createShaderModule({ code });\n  }\n\n  // TODO: add an expectContents for textures, which logs data: uris on failure\n\n  expectContents(src: GPUBuffer, expected: ArrayBufferView): Promise<void> {\n    return this.asyncExpectation(async () => {\n      const exp = new Uint8Array(expected.buffer, expected.byteOffset, expected.byteLength);\n\n      const size = expected.buffer.byteLength;\n      const dst = this.device.createBuffer({\n        size: expected.buffer.byteLength,\n        usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\n      });\n\n      const c = this.device.createCommandEncoder();\n      c.copyBufferToBuffer(src, 0, dst, 0, size);\n\n      this.queue.submit([c.finish()]);\n\n      const actual = new Uint8Array(await dst.mapReadAsync());\n      this.expectBuffer(actual, exp);\n    });\n  }\n\n  expectBuffer(actual: Uint8Array, exp: Uint8Array): void {\n    const size = exp.byteLength;\n    if (actual.byteLength !== size) {\n      this.rec.fail('size mismatch');\n      return;\n    }\n    let failedPixels = 0;\n    for (let i = 0; i < size; ++i) {\n      if (actual[i] !== exp[i]) {\n        if (failedPixels > 4) {\n          this.rec.fail('... and more');\n          break;\n        }\n        failedPixels++;\n        this.rec.fail(`at [${i}], expected ${exp[i]}, got ${actual[i]}`);\n      }\n    }\n    if (size <= 256 && failedPixels > 0) {\n      const expHex = Array.from(exp)\n        .map(x => x.toString(16).padStart(2, '0'))\n        .join('');\n      const actHex = Array.from(actual)\n        .map(x => x.toString(16).padStart(2, '0'))\n        .join('');\n      this.rec.log('EXPECT: ' + expHex);\n      this.rec.log('ACTUAL: ' + actHex);\n    }\n  }\n}\n"],"file":"gpu_test.js"}