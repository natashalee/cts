{"version":3,"sources":["../../../../src/suites/cts/validation/createView.spec.ts"],"names":["description","TestGroup","ValidationTest","ARRAY_LAYER_COUNT_2D","MIP_LEVEL_COUNT","FORMAT","F","createTexture","options","width","height","arrayLayerCount","mipLevelCount","sampleCount","device","size","depth","dimension","format","usage","GPUTextureUsage","SAMPLED","getDescriptor","baseMipLevel","baseArrayLayer","g","test","t","success","params","texture","descriptor","expectValidationError","createView","nonSquareTexture","destroy","commandEncoder","createCommandEncoder","renderPass","beginRenderPass","colorAttachments","attachment","loadValue","r","b","a","endPass","finish"],"mappings":"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","sourcesContent":["export const description = `\ncreateView validation tests.\n`;\n\nimport { TestGroup } from '../../../framework/index.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nconst ARRAY_LAYER_COUNT_2D = 6;\nconst MIP_LEVEL_COUNT: number = 6;\nconst FORMAT: GPUTextureFormat = 'rgba8unorm';\n\nclass F extends ValidationTest {\n  createTexture(\n    options: {\n      width?: number;\n      height?: number;\n      arrayLayerCount?: number;\n      mipLevelCount?: number;\n      sampleCount?: number;\n    } = {}\n  ): GPUTexture {\n    const {\n      width = 32,\n      height = 32,\n      arrayLayerCount = 1,\n      mipLevelCount = MIP_LEVEL_COUNT,\n      sampleCount = 1,\n    } = options;\n\n    return this.device.createTexture({\n      size: { width, height, depth: 1 },\n      arrayLayerCount,\n      mipLevelCount,\n      sampleCount,\n      dimension: '2d',\n      format: FORMAT,\n      usage: GPUTextureUsage.SAMPLED,\n    });\n  }\n\n  getDescriptor(\n    options: {\n      format?: GPUTextureFormat;\n      dimension?: GPUTextureViewDimension;\n      baseMipLevel?: number;\n      mipLevelCount?: number;\n      baseArrayLayer?: number;\n      arrayLayerCount?: number;\n    } = {}\n  ): GPUTextureViewDescriptor {\n    const {\n      format = FORMAT,\n      dimension = '2d',\n      baseMipLevel = 0,\n      mipLevelCount = MIP_LEVEL_COUNT,\n      baseArrayLayer = 0,\n      arrayLayerCount = 1,\n    } = options;\n    return {\n      format,\n      dimension,\n      baseMipLevel,\n      mipLevelCount,\n      baseArrayLayer,\n      arrayLayerCount,\n    };\n  }\n}\n\nexport const g = new TestGroup(F);\n\ng.test('creating texture view on a 2D non array texture', async t => {\n  const { dimension = '2d', arrayLayerCount, mipLevelCount, baseMipLevel, success } = t.params;\n\n  const texture = t.createTexture({ arrayLayerCount: 1 });\n\n  const descriptor = t.getDescriptor({\n    dimension,\n    arrayLayerCount,\n    mipLevelCount,\n    baseMipLevel,\n  });\n\n  await t.expectValidationError(() => {\n    texture.createView(descriptor);\n  }, !success);\n}).params([\n  { success: true }, // default view works\n  { arrayLayerCount: 1, success: true }, // it is OK to create a 2D texture view on a 2D texture\n  { arrayLayerCount: 2, success: false }, // it is an error to view a layer past the end of the texture\n  { dimension: '2d-array', arrayLayerCount: 1, success: true }, // it is OK to create a 1-layer 2D array texture view on a 2D texture\n  // mip level is in range\n  { mipLevelCount: 1, baseMipLevel: MIP_LEVEL_COUNT - 1, success: true },\n  { mipLevelCount: 2, baseMipLevel: MIP_LEVEL_COUNT - 2, success: true },\n  // baseMipLevel == k && mipLevelCount == 0 means to use levels k..end\n  { mipLevelCount: 0, baseMipLevel: 0, success: true },\n  { mipLevelCount: 0, baseMipLevel: 1, success: true },\n  { mipLevelCount: 0, baseMipLevel: MIP_LEVEL_COUNT - 1, success: true },\n  { mipLevelCount: 0, baseMipLevel: MIP_LEVEL_COUNT, success: false },\n  // it is an error to make the mip level out of range\n  { mipLevelCount: MIP_LEVEL_COUNT + 1, baseMipLevel: 0, success: false },\n  { mipLevelCount: MIP_LEVEL_COUNT, baseMipLevel: 1, success: false },\n  { mipLevelCount: 2, baseMipLevel: MIP_LEVEL_COUNT - 1, success: false },\n  { mipLevelCount: 1, baseMipLevel: MIP_LEVEL_COUNT, success: false },\n]);\n\ng.test('creating texture view on a 2D array texture', async t => {\n  const { dimension = '2d-array', arrayLayerCount, baseArrayLayer, success } = t.params;\n\n  const texture = t.createTexture({ arrayLayerCount: ARRAY_LAYER_COUNT_2D });\n\n  const descriptor = t.getDescriptor({\n    dimension,\n    arrayLayerCount,\n    baseArrayLayer,\n  });\n\n  await t.expectValidationError(() => {\n    texture.createView(descriptor);\n  }, !success);\n}).params([\n  { success: true }, // default view works\n  { dimension: '2d', arrayLayerCount: 1, success: true }, // it is OK to create a 2D texture view on a 2D array texture\n  { arrayLayerCount: ARRAY_LAYER_COUNT_2D, success: true }, // it is OK to create a 2D array texture view on a 2D array texture\n  // baseArrayLayer == k && arrayLayerCount == 0 means to use layers k..end.\n  { arrayLayerCount: 0, baseArrayLayer: 0, success: true },\n  { arrayLayerCount: 0, baseArrayLayer: 1, success: true },\n  { arrayLayerCount: 0, baseArrayLayer: ARRAY_LAYER_COUNT_2D - 1, success: true },\n  { arrayLayerCount: 0, baseArrayLayer: ARRAY_LAYER_COUNT_2D, success: false },\n  // It is an error for the array layer range of the view to exceed that of the texture\n  { arrayLayerCount: ARRAY_LAYER_COUNT_2D + 1, baseArrayLayer: 0, success: false },\n  { arrayLayerCount: ARRAY_LAYER_COUNT_2D, baseArrayLayer: 1, success: false },\n  { arrayLayerCount: 2, baseArrayLayer: ARRAY_LAYER_COUNT_2D - 1, success: false },\n  { arrayLayerCount: 1, baseArrayLayer: ARRAY_LAYER_COUNT_2D, success: false },\n]);\n\ng.test(\n  'Using defaults validates the same as setting values for more than 1 array layer',\n  async t => {\n    const { format, dimension, arrayLayerCount, mipLevelCount, success } = t.params;\n\n    const texture = t.createTexture({ arrayLayerCount: ARRAY_LAYER_COUNT_2D });\n\n    const descriptor = { format, dimension, arrayLayerCount, mipLevelCount };\n\n    await t.expectValidationError(() => {\n      texture.createView(descriptor);\n    }, !success);\n  }\n).params([\n  { success: true },\n  { format: 'rgba8unorm', success: true },\n  { format: 'r8unorm', success: false },\n  { dimension: '2d-array', success: true },\n  { dimension: '2d', success: false },\n  { arrayLayerCount: ARRAY_LAYER_COUNT_2D, success: false }, // setting array layers to non-0 means the dimensionality will default to 2D so by itself it causes an error.\n  { arrayLayerCount: ARRAY_LAYER_COUNT_2D, dimension: '2d-array', success: true },\n  {\n    arrayLayerCount: ARRAY_LAYER_COUNT_2D,\n    dimension: '2d-array',\n    mipLevelCount: MIP_LEVEL_COUNT,\n    success: true,\n  },\n]);\n\ng.test('Using defaults validates the same as setting values for only 1 array layer', async t => {\n  const { format, dimension, arrayLayerCount, mipLevelCount, success } = t.params;\n\n  const texture = t.createTexture({ arrayLayerCount: 1 });\n\n  const descriptor = { format, dimension, arrayLayerCount, mipLevelCount };\n\n  await t.expectValidationError(() => {\n    texture.createView(descriptor);\n  }, !success);\n}).params([\n  { success: true },\n  { format: 'rgba8unorm', success: true },\n  { format: 'r8unorm', success: false },\n  { dimension: '2d-array', success: true },\n  { dimension: '2d', success: true },\n  { arrayLayerCount: 0, success: true },\n  { arrayLayerCount: 1, success: true },\n  { arrayLayerCount: 2, success: false },\n  { mipLevelCount: MIP_LEVEL_COUNT, success: true },\n  { mipLevelCount: 1, success: true },\n]);\n\ng.test('creating cube map texture view', async t => {\n  const { dimension = '2d-array', arrayLayerCount, success } = t.params;\n\n  const texture = t.createTexture({ arrayLayerCount: 16 });\n\n  const descriptor = t.getDescriptor({\n    dimension,\n    arrayLayerCount,\n  });\n\n  await t.expectValidationError(() => {\n    texture.createView(descriptor);\n  }, !success);\n}).params([\n  { dimension: 'cube', arrayLayerCount: 6, success: true }, // it is OK to create a cube map texture view with arrayLayerCount == 6\n  // it is an error to create a cube map texture view with arrayLayerCount != 6\n  { dimension: 'cube', arrayLayerCount: 3, success: false },\n  { dimension: 'cube', arrayLayerCount: 7, success: false },\n  { dimension: 'cube', arrayLayerCount: 12, success: false },\n  { dimension: 'cube', success: false },\n  { dimension: 'cube-array', arrayLayerCount: 12, success: true }, // it is OK to create a cube map array texture view with arrayLayerCount % 6 == 0\n  // it is an error to create a cube map array texture view with arrayLayerCount % 6 != 0\n  { dimension: 'cube-array', arrayLayerCount: 11, success: false },\n  { dimension: 'cube-array', arrayLayerCount: 13, success: false },\n]);\n\ng.test('creating cube map texture view with a non square texture', async t => {\n  const { dimension, arrayLayerCount } = t.params;\n\n  const nonSquareTexture = t.createTexture({\n    arrayLayerCount: 18,\n    width: 32,\n    height: 16,\n    mipLevelCount: 5,\n  });\n\n  const descriptor = t.getDescriptor({\n    dimension,\n    arrayLayerCount,\n  });\n\n  await t.expectValidationError(() => {\n    nonSquareTexture.createView(descriptor);\n  });\n}).params([\n  { dimension: 'cube', arrayLayerCount: 6 }, // it is an error to create a cube map texture view with width != height.\n  { dimension: 'cube-array', arrayLayerCount: 12 }, // it is an error to create a cube map array texture view with width != height.\n]);\n\n// TODO: add more tests when rules are fully implemented.\ng.test('test the format compatibility rules when creating a texture view', async t => {\n  const texture = t.createTexture({ arrayLayerCount: 1 });\n\n  const descriptor = t.getDescriptor({\n    format: 'depth24plus-stencil8',\n  });\n\n  // it is invalid to create a view in depth-stencil format on a RGBA texture\n  await t.expectValidationError(() => {\n    texture.createView(descriptor);\n  });\n});\n\ng.test('it is invalid to use a texture view created from a destroyed texture', async t => {\n  const texture = t.createTexture({ arrayLayerCount: 1 });\n\n  texture.destroy();\n\n  const commandEncoder = t.device.createCommandEncoder();\n  const renderPass = commandEncoder.beginRenderPass({\n    colorAttachments: [\n      {\n        attachment: texture.createView(),\n        loadValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n      },\n    ],\n  });\n  renderPass.endPass();\n\n  await t.expectValidationError(() => {\n    commandEncoder.finish();\n  });\n});\n\n// TODO: Add tests for TextureAspect\n"],"file":"createView.spec.js"}