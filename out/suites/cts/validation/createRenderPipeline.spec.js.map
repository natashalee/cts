{"version":3,"sources":["../../../../src/suites/cts/validation/createRenderPipeline.spec.ts"],"names":["description","TestGroup","ValidationTest","F","init","Promise","all","initGLSL","getDescriptor","options","defaultColorStates","format","primitiveTopology","colorStates","sampleCount","depthStencilState","length","vertexStage","getVertexStage","fragmentStage","getFragmentStage","layout","getPipelineLayout","module","device","createShaderModule","code","entryPoint","fragColorType","endsWith","makeShaderModule","createPipelineLayout","bindGroupLayouts","createTexture","params","size","width","height","depth","usage","GPUTextureUsage","OUTPUT_ATTACHMENT","g","test","t","descriptor","createRenderPipeline","goodDescriptor","badDescriptor","expectValidationError","success","attachmentSamples","pipelineSamples","colorTexture","depthStencilTexture","renderPassDescriptorWithoutDepthStencil","colorAttachments","attachment","createView","loadValue","r","b","a","renderPassDescriptorWithDepthStencilOnly","depthStencilAttachment","depthLoadValue","depthStoreOp","stencilLoadValue","stencilStoreOp","pipelineWithoutDepthStencil","pipelineWithDepthStencilOnly","renderPassDescriptor","pipeline","commandEncoder","createCommandEncoder","renderPass","beginRenderPass","setPipeline","endPass","finish"],"mappings":"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","sourcesContent":["export const description = `\ncreateRenderPipeline validation tests.\n`;\n\nimport { TestGroup } from '../../../framework/index.js';\nimport GLSL from '../../../tools/glsl.macro.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nclass F extends ValidationTest {\n  async init(): Promise<void> {\n    await Promise.all([super.init(), this.initGLSL()]);\n  }\n\n  getDescriptor(\n    options: {\n      primitiveTopology?: GPUPrimitiveTopology;\n      colorStates?: GPUColorStateDescriptor[];\n      sampleCount?: number;\n      depthStencilState?: GPUDepthStencilStateDescriptor;\n    } = {}\n  ): GPURenderPipelineDescriptor {\n    const defaultColorStates: GPUColorStateDescriptor[] = [{ format: 'rgba8unorm' }];\n    const {\n      primitiveTopology = 'triangle-list',\n      colorStates = defaultColorStates,\n      sampleCount = 1,\n      depthStencilState,\n    } = options;\n\n    const format = colorStates.length ? colorStates[0].format : 'rgba8unorm';\n\n    return {\n      vertexStage: this.getVertexStage(),\n      fragmentStage: this.getFragmentStage(format),\n      layout: this.getPipelineLayout(),\n      primitiveTopology,\n      colorStates,\n      sampleCount,\n      depthStencilState,\n    };\n  }\n\n  getVertexStage(): GPUProgrammableStageDescriptor {\n    return {\n      module: this.device.createShaderModule({\n        code: GLSL(\n          'vertex',\n          `#version 450\n            void main() {\n              gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\n            }\n          `\n        ),\n      }),\n      entryPoint: 'main',\n    };\n  }\n\n  getFragmentStage(format: GPUTextureFormat): GPUProgrammableStageDescriptor {\n    let fragColorType;\n    if (format.endsWith('sint')) {\n      fragColorType = 'ivec4';\n    } else if (format.endsWith('uint')) {\n      fragColorType = 'uvec4';\n    } else {\n      fragColorType = 'vec4';\n    }\n\n    const code = `\n      #version 450\n      layout(location = 0) out ${fragColorType} fragColor;\n      void main() {\n        fragColor = ${fragColorType}(0.0, 1.0, 0.0, 1.0);\n      }\n    `;\n\n    return {\n      module: this.makeShaderModule('fragment', code),\n      entryPoint: 'main',\n    };\n  }\n\n  getPipelineLayout(): GPUPipelineLayout {\n    return this.device.createPipelineLayout({ bindGroupLayouts: [] });\n  }\n\n  createTexture(params: { format: GPUTextureFormat; sampleCount: number }): GPUTexture {\n    const { format, sampleCount } = params;\n\n    return this.device.createTexture({\n      size: { width: 4, height: 4, depth: 1 },\n      usage: GPUTextureUsage.OUTPUT_ATTACHMENT,\n      format,\n      sampleCount,\n    });\n  }\n}\n\nexport const g = new TestGroup(F);\n\ng.test('basic use of createRenderPipeline', t => {\n  const descriptor = t.getDescriptor();\n\n  t.device.createRenderPipeline(descriptor);\n});\n\ng.test('at least one color state is required', async t => {\n  const goodDescriptor = t.getDescriptor({\n    colorStates: [{ format: 'rgba8unorm' }],\n  });\n\n  // Control case\n  t.device.createRenderPipeline(goodDescriptor);\n\n  // Fail because lack of color states\n  const badDescriptor = t.getDescriptor({\n    colorStates: [],\n  });\n\n  await t.expectValidationError(() => {\n    t.device.createRenderPipeline(badDescriptor);\n  });\n});\n\ng.test('color formats must be renderable', async t => {\n  const { format, success } = t.params;\n\n  const descriptor = t.getDescriptor({ colorStates: [{ format }] });\n\n  if (success) {\n    // Succeeds when format is renderable\n    t.device.createRenderPipeline(descriptor);\n  } else {\n    // Fails because when format is non-renderable\n    await t.expectValidationError(() => {\n      t.device.createRenderPipeline(descriptor);\n    });\n  }\n}).params([\n  // 8-bit formats\n  { format: 'r8unorm', success: true },\n  { format: 'r8snorm', success: false },\n  { format: 'r8uint', success: true },\n  { format: 'r8sint', success: true },\n  // 16-bit formats\n  { format: 'r16uint', success: true },\n  { format: 'r16sint', success: true },\n  { format: 'r16float', success: true },\n  { format: 'rg8unorm', success: true },\n  { format: 'rg8snorm', success: false },\n  { format: 'rg8uint', success: true },\n  { format: 'rg8sint', success: true },\n  // 32-bit formats\n  { format: 'r32uint', success: true },\n  { format: 'r32sint', success: true },\n  { format: 'r32float', success: true },\n  { format: 'rg16uint', success: true },\n  { format: 'rg16sint', success: true },\n  { format: 'rg16float', success: true },\n  { format: 'rgba8unorm', success: true },\n  { format: 'rgba8unorm-srgb', success: true },\n  { format: 'rgba8snorm', success: false },\n  { format: 'rgba8uint', success: true },\n  { format: 'rgba8sint', success: true },\n  { format: 'bgra8unorm', success: true },\n  { format: 'bgra8unorm-srgb', success: true },\n  // Packed 32-bit formats\n  { format: 'rgb10a2unorm', success: true },\n  { format: 'rg11b10float', success: false },\n  // 64-bit formats\n  { format: 'rg32uint', success: true },\n  { format: 'rg32sint', success: true },\n  { format: 'rg32float', success: true },\n  { format: 'rgba16uint', success: true },\n  { format: 'rgba16sint', success: true },\n  { format: 'rgba16float', success: true },\n  // 128-bit formats\n  { format: 'rgba32uint', success: true },\n  { format: 'rgba32sint', success: true },\n  { format: 'rgba32float', success: true },\n]);\n\ng.test('sample count must be valid', async t => {\n  const { sampleCount, success } = t.params;\n\n  const descriptor = t.getDescriptor({ sampleCount });\n\n  if (success) {\n    // Succeeds when sample count is valid\n    t.device.createRenderPipeline(descriptor);\n  } else {\n    // Fails when sample count is not 4 or 1\n    await t.expectValidationError(() => {\n      t.device.createRenderPipeline(descriptor);\n    });\n  }\n}).params([\n  { sampleCount: 0, success: false },\n  { sampleCount: 1, success: true },\n  { sampleCount: 2, success: false },\n  { sampleCount: 3, success: false },\n  { sampleCount: 4, success: true },\n  { sampleCount: 8, success: false },\n  { sampleCount: 16, success: false },\n]);\n\ng.test('sample count must be equal to the one of every attachment in the render pass', async t => {\n  const { attachmentSamples, pipelineSamples, success } = t.params;\n\n  const colorTexture = t.createTexture({\n    format: 'rgba8unorm',\n    sampleCount: attachmentSamples,\n  });\n  const depthStencilTexture = t.createTexture({\n    format: 'depth24plus-stencil8',\n    sampleCount: attachmentSamples,\n  });\n  const renderPassDescriptorWithoutDepthStencil = {\n    colorAttachments: [\n      {\n        attachment: colorTexture.createView(),\n        loadValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n      },\n    ],\n  };\n  const renderPassDescriptorWithDepthStencilOnly = {\n    colorAttachments: [],\n    depthStencilAttachment: {\n      attachment: depthStencilTexture.createView(),\n      depthLoadValue: 1.0,\n      depthStoreOp: 'store',\n      stencilLoadValue: 0,\n      stencilStoreOp: 'store',\n    },\n  };\n\n  const pipelineWithoutDepthStencil = t.device.createRenderPipeline(\n    t.getDescriptor({\n      sampleCount: pipelineSamples,\n    })\n  );\n  const pipelineWithDepthStencilOnly = t.device.createRenderPipeline(\n    t.getDescriptor({\n      colorStates: [],\n      depthStencilState: { format: 'depth24plus-stencil8' },\n      sampleCount: pipelineSamples,\n    })\n  );\n\n  for (const { renderPassDescriptor, pipeline } of [\n    {\n      renderPassDescriptor: renderPassDescriptorWithoutDepthStencil,\n      pipeline: pipelineWithoutDepthStencil,\n    },\n    {\n      renderPassDescriptor: renderPassDescriptorWithDepthStencilOnly,\n      pipeline: pipelineWithDepthStencilOnly,\n    },\n  ]) {\n    const commandEncoder = t.device.createCommandEncoder();\n    const renderPass = commandEncoder.beginRenderPass(renderPassDescriptor);\n    renderPass.setPipeline(pipeline);\n    renderPass.endPass();\n\n    await t.expectValidationError(() => {\n      commandEncoder.finish();\n    }, !success);\n  }\n}).params([\n  { attachmentSamples: 4, pipelineSamples: 4, success: true }, // It is allowed to use multisampled render pass and multisampled render pipeline.\n  { attachmentSamples: 4, pipelineSamples: 1, success: false }, // It is not allowed to use multisampled render pass and non-multisampled render pipeline.\n  { attachmentSamples: 1, pipelineSamples: 4, success: false }, // It is not allowed to use non-multisampled render pass and multisampled render pipeline.\n]);\n"],"file":"createRenderPipeline.spec.js"}