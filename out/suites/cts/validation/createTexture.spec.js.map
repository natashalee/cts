{"version":3,"sources":["../../../../src/suites/cts/validation/createTexture.spec.ts"],"names":["description","TestGroup","ValidationTest","F","getDescriptor","options","width","height","arrayLayerCount","mipLevelCount","sampleCount","format","size","depth","dimension","usage","GPUTextureUsage","OUTPUT_ATTACHMENT","SAMPLED","g","test","t","success","params","descriptor","expectValidationError","device","createTexture","texture","destroy","destroyBeforeEncode","destroyAfterEncode","textureView","createView","commandEncoder","createCommandEncoder","renderPass","beginRenderPass","colorAttachments","attachment","loadValue","r","b","a","endPass","commandBuffer","finish","queue","submit"],"mappings":"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","sourcesContent":["export const description = `\ncreateTexture validation tests.\n`;\n\nimport { TestGroup } from '../../../framework/index.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nclass F extends ValidationTest {\n  getDescriptor(\n    options: {\n      width?: number;\n      height?: number;\n      arrayLayerCount?: number;\n      mipLevelCount?: number;\n      sampleCount?: number;\n      format?: GPUTextureFormat;\n    } = {}\n  ): GPUTextureDescriptor {\n    const {\n      width = 32,\n      height = 32,\n      arrayLayerCount = 1,\n      mipLevelCount = 1,\n      sampleCount = 1,\n      format = 'rgba8unorm',\n    } = options;\n    return {\n      size: { width, height, depth: 1 },\n      arrayLayerCount,\n      mipLevelCount,\n      sampleCount,\n      dimension: '2d',\n      format,\n      usage: GPUTextureUsage.OUTPUT_ATTACHMENT | GPUTextureUsage.SAMPLED,\n    };\n  }\n}\n\nexport const g = new TestGroup(F);\n\ng.test('validation of sampleCount', async t => {\n  const { sampleCount, mipLevelCount, arrayLayerCount, success } = t.params;\n\n  const descriptor = t.getDescriptor({ sampleCount, mipLevelCount, arrayLayerCount });\n\n  await t.expectValidationError(() => {\n    t.device.createTexture(descriptor);\n  }, !success);\n}).params([\n  { sampleCount: 0, success: false }, // sampleCount of 0 is not allowed\n  { sampleCount: 1, success: true }, // sampleCount of 1 is allowed\n  { sampleCount: 2, success: false }, // sampleCount of 2 is not allowed\n  { sampleCount: 3, success: false }, // sampleCount of 3 is not allowed\n  { sampleCount: 4, success: true }, // sampleCount of 4 is allowed\n  { sampleCount: 8, success: false }, // sampleCount of 8 is not allowed\n  { sampleCount: 16, success: false }, // sampleCount of 16 is not allowed\n  { sampleCount: 4, mipLevelCount: 2, success: false }, // it is an error to create a multisampled texture with mipLevelCount > 1\n  { sampleCount: 4, arrayLayerCount: 2, success: true }, // multisampled 2D array texture is supported\n]);\n\ng.test('validation of mipLevelCount', async t => {\n  const { width, height, mipLevelCount, success } = t.params;\n\n  const descriptor = t.getDescriptor({ width, height, mipLevelCount });\n\n  await t.expectValidationError(() => {\n    t.device.createTexture(descriptor);\n  }, !success);\n}).params([\n  { width: 32, height: 32, mipLevelCount: 1, success: true }, // mipLevelCount of 1 is allowed\n  { width: 32, height: 32, mipLevelCount: 0, success: false }, // mipLevelCount of 0 is not allowed\n  { width: 32, height: 32, mipLevelCount: 6, success: true }, // full mip chains are allowed (Mip level sizes: 32, 16, 8, 4, 2, 1)\n  { width: 31, height: 32, mipLevelCount: 7, success: false }, // too big mip chains on width are disallowed (Mip level width: 31, 15, 7, 3, 1, 1)\n  { width: 32, height: 31, mipLevelCount: 7, success: false }, // too big mip chains on height are disallowed (Mip level width: 31, 15, 7, 3, 1, 1)\n  { width: 32, height: 32, mipLevelCount: 100, success: false }, // undefined shift check if miplevel is bigger than the integer bit width\n  { width: 32, height: 8, mipLevelCount: 6, success: true }, // non square mip map halves the resolution until a 1x1 dimension. (Mip maps: 32 * 8, 16 * 4, 8 * 2, 4 * 1, 2 * 1, 1 * 1)\n]);\n\ng.test('it is valid to destroy a texture', t => {\n  const descriptor = t.getDescriptor();\n  const texture = t.device.createTexture(descriptor);\n  texture.destroy();\n});\n\ng.test('it is valid to destroy a destroyed texture', t => {\n  const descriptor = t.getDescriptor();\n  const texture = t.device.createTexture(descriptor);\n  texture.destroy();\n  texture.destroy();\n});\n\ng.test('it is invalid to submit a destroyed texture before and after encode', async t => {\n  const { destroyBeforeEncode, destroyAfterEncode, success } = t.params;\n\n  const descriptor = t.getDescriptor();\n  const texture = t.device.createTexture(descriptor);\n  const textureView = texture.createView();\n\n  if (destroyBeforeEncode) {\n    texture.destroy();\n  }\n\n  const commandEncoder = t.device.createCommandEncoder();\n  const renderPass = commandEncoder.beginRenderPass({\n    colorAttachments: [\n      {\n        attachment: textureView,\n        loadValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n      },\n    ],\n  });\n  renderPass.endPass();\n  const commandBuffer = commandEncoder.finish();\n\n  if (destroyAfterEncode) {\n    texture.destroy();\n  }\n\n  await t.expectValidationError(() => {\n    t.queue.submit([commandBuffer]);\n  }, !success);\n}).params([\n  { destroyBeforeEncode: false, destroyAfterEncode: false, success: true },\n  { destroyBeforeEncode: true, destroyAfterEncode: false, success: false },\n  { destroyBeforeEncode: false, destroyAfterEncode: true, success: false },\n]);\n\ng.test('it is invalid to have an output attachment texture with non renderable format', async t => {\n  const { format, success } = t.params;\n\n  const descriptor = t.getDescriptor({ width: 1, height: 1, format });\n\n  await t.expectValidationError(() => {\n    t.device.createTexture(descriptor);\n  }, !success);\n}).params([\n  // 8-bit formats\n  { format: 'r8unorm', success: true },\n  { format: 'r8snorm', success: false },\n  { format: 'r8uint', success: true },\n  { format: 'r8sint', success: true },\n  // 16-bit formats\n  { format: 'r16uint', success: true },\n  { format: 'r16sint', success: true },\n  { format: 'r16float', success: true },\n  { format: 'rg8unorm', success: true },\n  { format: 'rg8snorm', success: false },\n  { format: 'rg8uint', success: true },\n  { format: 'rg8sint', success: true },\n  // 32-bit formats\n  { format: 'r32uint', success: true },\n  { format: 'r32sint', success: true },\n  { format: 'r32float', success: true },\n  { format: 'rg16uint', success: true },\n  { format: 'rg16sint', success: true },\n  { format: 'rg16float', success: true },\n  { format: 'rgba8unorm', success: true },\n  { format: 'rgba8unorm-srgb', success: true },\n  { format: 'rgba8snorm', success: false },\n  { format: 'rgba8uint', success: true },\n  { format: 'rgba8sint', success: true },\n  { format: 'bgra8unorm', success: true },\n  { format: 'bgra8unorm-srgb', success: true },\n  // Packed 32-bit formats\n  { format: 'rgb10a2unorm', success: true },\n  { format: 'rg11b10float', success: false },\n  // 64-bit formats\n  { format: 'rg32uint', success: true },\n  { format: 'rg32sint', success: true },\n  { format: 'rg32float', success: true },\n  { format: 'rgba16uint', success: true },\n  { format: 'rgba16sint', success: true },\n  { format: 'rgba16float', success: true },\n  // 128-bit formats\n  { format: 'rgba32uint', success: true },\n  { format: 'rgba32sint', success: true },\n  { format: 'rgba32float', success: true },\n]);\n\n// TODO: Add tests for compressed texture formats\n"],"file":"createTexture.spec.js"}