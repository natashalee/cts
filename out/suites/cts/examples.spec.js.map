{"version":3,"sources":["../../../src/suites/cts/examples.spec.ts"],"names":["description","TestGroup","GPUTest","g","test","t","expect","shouldThrow","TypeError","shouldReject","Promise","reject","params","x","y","result","fence","queue","createFence","signal","onCompletion","getCompletedValue","data","Uint32Array","src","map","device","createBufferMapped","size","usage","GPUBufferUsage","COPY_SRC","COPY_DST","set","unmap","expectContents"],"mappings":";;;;AAAA,OAAO,MAAMA,WAAW,GAAI;;CAArB;AAIP,SAASC,SAAT,QAA0B,0BAA1B;AAEA,SAASC,OAAT,QAAwB,eAAxB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,CAAC,GAAG,IAAIF,SAAJ,CAAcC,OAAd,CAAV;AAEPC,CAAC,CAACC,IAAF,CAAO,OAAP,EAAgBC,CAAC,IAAI;AACnBA,EAAAA,CAAC,CAACC,MAAF,CAAS,IAAT;AACAD,EAAAA,CAAC,CAACC,MAAF,CAAS,IAAT,EAAe,qBAAf;AAEAD,EAAAA,CAAC,CAACE,WAAF,EACE;AACA,aAFF,EAGE;AACA,QAAM;AACJ,UAAM,IAAIC,SAAJ,EAAN;AACD,GANH,EAOE;AACA,+BARF;AAUD,CAdD;AAgBAL,CAAC,CAACC,IAAF,CAAO,aAAP,EAAsB,MAAMC,CAAN,IAAW;AAC/B;AACA,QAAMA,CAAC,CAACI,YAAF,EACJ;AACA,aAFI,EAGJ;AACAC,EAAAA,OAAO,CAACC,MAAR,CAAe,IAAIH,SAAJ,EAAf,CAJI,EAKJ;AACA,gCANI,CAAN,CAF+B,CAW/B;;AACA,QAAMH,CAAC,CAACI,YAAF,CACJ,WADI,EAEJ,CAAC,YAAY;AACX,UAAM,IAAID,SAAJ,EAAN;AACD,GAFD,GAFI,EAKJ,8BALI,CAAN;AAOD,CAnBD;AAqBAL,CAAC,CAACC,IAAF,CAAO,cAAP,EAAuBC,CAAC,IAAI;AAC1BA,EAAAA,CAAC,CAACC,MAAF,CAASD,CAAC,CAACO,MAAF,CAASC,CAAT,GAAaR,CAAC,CAACO,MAAF,CAASE,CAAtB,KAA4BT,CAAC,CAACO,MAAF,CAASG,MAA9C;AACD,CAFD,EAEGH,MAFH,CAEU,CACR;AAAEC,EAAAA,CAAC,EAAE,CAAL;AAAQC,EAAAA,CAAC,EAAE,CAAX;AAAcC,EAAAA,MAAM,EAAE;AAAtB,CADQ,EACmB;AAC3B;AAAEF,EAAAA,CAAC,EAAE,CAAC,EAAN;AAAUC,EAAAA,CAAC,EAAE,EAAb;AAAiBC,EAAAA,MAAM,EAAE;AAAzB,CAFQ,CAFV,E,CAMA;;AAEAZ,CAAC,CAACC,IAAF,CAAO,WAAP,EAAoB,MAAMC,CAAN,IAAW;AAC7B,QAAMW,KAAK,GAAGX,CAAC,CAACY,KAAF,CAAQC,WAAR,EAAd;AACAb,EAAAA,CAAC,CAACY,KAAF,CAAQE,MAAR,CAAeH,KAAf,EAAsB,CAAtB;AACA,QAAMA,KAAK,CAACI,YAAN,CAAmB,CAAnB,CAAN;AACAf,EAAAA,CAAC,CAACC,MAAF,CAASU,KAAK,CAACK,iBAAN,OAA8B,CAAvC;AACD,CALD;AAOAlB,CAAC,CAACC,IAAF,CAAO,aAAP,EAAsB,MAAMC,CAAN,IAAW;AAC/B,QAAMiB,IAAI,GAAG,IAAIC,WAAJ,CAAgB,CAAC,CAAD,EAAI,IAAJ,EAAU,CAAV,CAAhB,CAAb;AACA,QAAM,CAACC,GAAD,EAAMC,GAAN,IAAapB,CAAC,CAACqB,MAAF,CAASC,kBAAT,CAA4B;AAC7CC,IAAAA,IAAI,EAAE,EADuC;AAE7CC,IAAAA,KAAK,EAAEC,cAAc,CAACC,QAAf,GAA0BD,cAAc,CAACE;AAFH,GAA5B,CAAnB;AAIA,MAAIT,WAAJ,CAAgBE,GAAhB,EAAqBQ,GAArB,CAAyBX,IAAzB;AACAE,EAAAA,GAAG,CAACU,KAAJ,GAP+B,CAS/B;AACA;;AACA,QAAM7B,CAAC,CAAC8B,cAAF,CAAiBX,GAAjB,EAAsBF,IAAtB,CAAN;AACD,CAZD","sourcesContent":["export const description = `\nExamples of writing CTS tests with various features.\n`;\n\nimport { TestGroup } from '../../framework/index.js';\n\nimport { GPUTest } from './gpu_test.js';\n\n// To run these tests in the standalone runner, run `grunt build` or `grunt pre` then open:\n// - http://localhost:8080/?runnow=1&q=cts:examples:\n// To run in WPT, copy/symlink the out-wpt/ directory as the webgpu/ directory in WPT, then open:\n// - (wpt server url)/webgpu/cts.html?q=cts:examples:\n//\n// Tests here can be run individually or in groups:\n// - ?q=cts:examples:basic/async=\n// - ?q=cts:examples:basic/\n// - ?q=cts:examples:\n\nexport const g = new TestGroup(GPUTest);\n\ng.test('basic', t => {\n  t.expect(true);\n  t.expect(true, 'true should be true');\n\n  t.shouldThrow(\n    // The expected '.name' of the thrown error.\n    'TypeError',\n    // This function is run inline inside shouldThrow, and is expected to throw.\n    () => {\n      throw new TypeError();\n    },\n    // Log message.\n    'function should throw Error'\n  );\n});\n\ng.test('basic/async', async t => {\n  // shouldReject must be awaited to ensure it can wait for the promise before the test ends.\n  await t.shouldReject(\n    // The expected '.name' of the thrown error.\n    'TypeError',\n    // Promise expected to reject.\n    Promise.reject(new TypeError()),\n    // Log message.\n    'Promise.reject should reject'\n  );\n\n  // Promise can also be an IIFE.\n  await t.shouldReject(\n    'TypeError',\n    (async () => {\n      throw new TypeError();\n    })(),\n    'Promise.reject should reject'\n  );\n});\n\ng.test('basic/params', t => {\n  t.expect(t.params.x + t.params.y === t.params.result);\n}).params([\n  { x: 2, y: 4, result: 6 }, //\n  { x: -10, y: 18, result: 8 },\n]);\n// (note blank comment above to enforce newlines on autoformat)\n\ng.test('gpu/async', async t => {\n  const fence = t.queue.createFence();\n  t.queue.signal(fence, 2);\n  await fence.onCompletion(1);\n  t.expect(fence.getCompletedValue() === 2);\n});\n\ng.test('gpu/buffers', async t => {\n  const data = new Uint32Array([0, 1234, 0]);\n  const [src, map] = t.device.createBufferMapped({\n    size: 12,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n  });\n  new Uint32Array(map).set(data);\n  src.unmap();\n\n  // Use the expectContents helper to check the actual contents of a GPUBuffer.\n  // Like shouldReject, it must be awaited.\n  await t.expectContents(src, data);\n});\n"],"file":"examples.spec.js"}