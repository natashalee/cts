{"version":3,"sources":["../../../src/suites/unittests/param_helpers.spec.ts"],"names":["description","TestGroup","paramsEquals","pcombine","pexclude","pfilter","poptions","UnitTest","ParamsTest","expectSpecEqual","act","exp","a","Array","from","expect","length","every","x","i","g","test","t","hello","p","q","y"],"mappings":"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","sourcesContent":["export const description = `\nUnit tests for parameterization helpers.\n`;\n\nimport {\n  ParamSpecIterable,\n  ParamsSpec,\n  TestGroup,\n  paramsEquals,\n  pcombine,\n  pexclude,\n  pfilter,\n  poptions,\n} from '../../framework/index.js';\n\nimport { UnitTest } from './unit_test.js';\n\nclass ParamsTest extends UnitTest {\n  expectSpecEqual(act: ParamSpecIterable, exp: ParamsSpec[]): void {\n    const a = Array.from(act);\n    this.expect(a.length === exp.length && a.every((x, i) => paramsEquals(x, exp[i])));\n  }\n}\n\nexport const g = new TestGroup(ParamsTest);\n\ng.test('options', t => {\n  t.expectSpecEqual(poptions('hello', [1, 2, 3]), [{ hello: 1 }, { hello: 2 }, { hello: 3 }]);\n});\n\ng.test('combine/none', t => {\n  t.expectSpecEqual(pcombine([]), []);\n});\n\ng.test('combine/zeroes and ones', t => {\n  t.expectSpecEqual(pcombine([[], []]), []);\n  t.expectSpecEqual(pcombine([[], [{}]]), []);\n  t.expectSpecEqual(pcombine([[{}], []]), []);\n  t.expectSpecEqual(pcombine([[{}], [{}]]), [{}]);\n});\n\ng.test('combine/mixed', t => {\n  t.expectSpecEqual(\n    pcombine([poptions('x', [1, 2]), poptions('y', ['a', 'b']), [{ p: 4 }, { q: 5 }], [{}]]),\n    [\n      { p: 4, x: 1, y: 'a' },\n      { q: 5, x: 1, y: 'a' },\n      { p: 4, x: 1, y: 'b' },\n      { q: 5, x: 1, y: 'b' },\n      { p: 4, x: 2, y: 'a' },\n      { q: 5, x: 2, y: 'a' },\n      { p: 4, x: 2, y: 'b' },\n      { q: 5, x: 2, y: 'b' },\n    ]\n  );\n});\n\ng.test('filter', t => {\n  t.expectSpecEqual(pfilter([{ a: true, x: 1 }, { a: false, y: 2 }], p => p.a), [\n    { a: true, x: 1 },\n  ]);\n});\n\ng.test('exclude', t => {\n  t.expectSpecEqual(\n    pexclude([{ a: true, x: 1 }, { a: false, y: 2 }], [{ a: true }, { a: false, y: 2 }]),\n    [{ a: true, x: 1 }]\n  );\n});\n"],"file":"param_helpers.spec.js"}